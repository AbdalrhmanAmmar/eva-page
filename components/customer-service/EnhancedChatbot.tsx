"use client";

import { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  MessageSquare,
  Send,
  X,
  Bot,
  User,
  Loader2,
  ThumbsUp,
  ThumbsDown,
  RefreshCw,
  Phone,
  Mail,
  FileText,
  Star,
  Clock,
} from "lucide-react";

interface Message {
  id: string;
  type: "user" | "bot";
  content: string;
  timestamp: Date;
  options?: string[];
  rating?: number;
}

interface ChatbotProps {
  isOpen: boolean;
  onClose: () => void;
}

const quickActions = [
  "ูุนูููุงุช ุนู ุงูููุชุฌุงุช",
  "ุงูุฃุณุนุงุฑ ูุงูุนุฑูุถ",
  "ุฎุฏูุฉ ูุง ุจุนุฏ ุงูุจูุน",
  "ุงูุฏุนู ุงูุชููู",
  "ูุนูููุงุช ุงูุดุญู",
  "ุณูุงุณุฉ ุงูุฅุฑุฌุงุน",
];

const botResponses = {
  "ูุนูููุงุช ุนู ุงูููุชุฌุงุช": {
    content: "ููุฏู ูุฌููุนุฉ ูุงุณุนุฉ ูู ุงูููุชุฌุงุช ูู ูุฌุงู ุงูุฃูู ูุงูุญูุงูุฉ:\n\nโข ุฃูุธูุฉ ุงููุฑุงูุจุฉ ุงูุฐููุฉ\nโข ุจูุงุจุงุช ุงูุชุญูู ุจุงูุฏุฎูู\nโข ุฃูุธูุฉ ุงูุฅูุฐุงุฑ ุงููุชุทูุฑุฉ\nโข ุญููู ุฅุฏุงุฑุฉ ุงููุจุงูู\n\nุฃู ููุชุฌ ุชุฑูุฏ ูุนุฑูุฉ ุงููุฒูุฏ ุนููุ",
    options: ["ุฃูุธูุฉ ุงููุฑุงูุจุฉ", "ุจูุงุจุงุช ุงูุชุญูู", "ุฃูุธูุฉ ุงูุฅูุฐุงุฑ", "ุฅุฏุงุฑุฉ ุงููุจุงูู"]
  },
  "ุงูุฃุณุนุงุฑ ูุงูุนุฑูุถ": {
    content: "ูุฏููุง ุนุฑูุถ ูููุฒุฉ ุญุงููุงู:\n\nโข ุฎุตู 15% ุนูู ุฃูุธูุฉ ุงููุฑุงูุจุฉ\nโข ุนุฑุถ ุฎุงุต ุนูู ุจุงูุงุช ุงูุฃูู ุงููุชูุงููุฉ\nโข ุชุฑููุจ ูุฌุงูู ููุทูุจุงุช ุฃูุซุฑ ูู 5000 ุฑูุงู\n\nูู ุชุฑูุฏ ุนุฑุถ ุณุนุฑ ูุฎุตุตุ",
    options: ["ุทูุจ ุนุฑุถ ุณุนุฑ", "ูุนุฑูุฉ ุงูุนุฑูุถ ุงูุญุงููุฉ", "ุงูุชุญุฏุซ ูุน ูุฎุชุต"]
  },
  "ุฎุฏูุฉ ูุง ุจุนุฏ ุงูุจูุน": {
    content: "ููุฏู ุฎุฏูุฉ ุดุงููุฉ ุจุนุฏ ุงูุจูุน:\n\nโข ุถูุงู ุดุงูู ููุฏุฉ ุณูุชูู\nโข ุตูุงูุฉ ุฏูุฑูุฉ ูุฌุงููุฉ\nโข ุฏุนู ุชููู ุนูู ูุฏุงุฑ ุงูุณุงุนุฉ\nโข ูุทุน ุบูุงุฑ ุฃุตููุฉ\n\nููู ูููููู ูุณุงุนุฏุชูุ",
    options: ["ุทูุจ ุตูุงูุฉ", "ุงุณุชุนูุงู ุนู ุงูุถูุงู", "ุฏุนู ุชููู", "ูุทุน ุบูุงุฑ"]
  },
  "ุงูุฏุนู ุงูุชููู": {
    content: "ูุฑูู ุงูุฏุนู ุงูุชููู ุฌุงูุฒ ููุณุงุนุฏุชู:\n\nโข ุญู ุงููุดุงูู ุงูุชูููุฉ\nโข ุฅุนุฏุงุฏ ูุชูููู ุงูุฃูุธูุฉ\nโข ุงูุชุฏุฑูุจ ุนูู ุงูุงุณุชุฎุฏุงู\nโข ุงูุชุญุฏูุซุงุช ูุงูุชุฑููุงุช\n\nูุง ููุน ุงููุณุงุนุฏุฉ ุงูุชู ุชุญุชุงุฌูุงุ",
    options: ["ูุดููุฉ ุชูููุฉ", "ุฅุนุฏุงุฏ ุงููุธุงู", "ุทูุจ ุชุฏุฑูุจ", "ุชุญุฏูุซ ุงูุจุฑูุงูุฌ"]
  },
  "ูุนูููุงุช ุงูุดุญู": {
    content: "ูุนูููุงุช ุงูุดุญู ูุงูุชูุตูู:\n\nโข ุงูุดุญู ุงููุฌุงูู ููุทูุจุงุช ุฃูุซุฑ ูู 1000 ุฑูุงู\nโข ุงูุชูุตูู ุฎูุงู 2-3 ุฃูุงู ุนูู\nโข ุฅููุงููุฉ ุงูุชูุตูู ูู ููุณ ุงูููู (ุงูุฑูุงุถ)\nโข ุชุชุจุน ุงูุทูุจ ุนุจุฑ ุงูุฑุณุงุฆู ุงููุตูุฉ\n\nูู ูุฏูู ุงุณุชูุณุงุฑ ูุญุฏุฏุ",
    options: ["ุชุชุจุน ุงูุทูุจ", "ุชูููุฉ ุงูุดุญู", "ููุงุนูุฏ ุงูุชูุตูู", "ุชุบููุฑ ุงูุนููุงู"]
  },
  "ุณูุงุณุฉ ุงูุฅุฑุฌุงุน": {
    content: "ุณูุงุณุฉ ุงูุฅุฑุฌุงุน ูุงูุงุณุชุจุฏุงู:\n\nโข ุฅููุงููุฉ ุงูุฅุฑุฌุงุน ุฎูุงู 14 ููู\nโข ุงูููุชุฌ ูุฌุจ ุฃู ูููู ูู ุญุงูุชู ุงูุฃุตููุฉ\nโข ุงุณุชุฑุฏุงุฏ ูุงูู ูููุจูุบ\nโข ุฎุฏูุฉ ุงูุงุณุชุจุฏุงู ูุชุงุญุฉ\n\nูู ุชุฑูุฏ ุฅุฑุฌุงุน ููุชุฌุ",
    options: ["ุทูุจ ุฅุฑุฌุงุน", "ุทูุจ ุงุณุชุจุฏุงู", "ุดุฑูุท ุงูุฅุฑุฌุงุน", "ุงูุชุญุฏุซ ูุน ูุฎุชุต"]
  }
};

export default function EnhancedChatbot({ isOpen, onClose }: ChatbotProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      type: "bot",
      content: "ูุฑุญุจุงู ุจู ูู ุฎุฏูุฉ ุนููุงุก EVA! ๐\n\nุฃูุง ูุณุงุนุฏู ุงูุฐูู ูุณุฃููู ุณุนูุฏุงู ููุณุงุนุฏุชู ุงูููู. ููู ูููููู ุฎุฏูุชูุ",
      timestamp: new Date(),
      options: quickActions
    }
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [showQuickActions, setShowQuickActions] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const generateBotResponse = (userMessage: string): Message => {
    const lowerMessage = userMessage.toLowerCase();
    
    // Check for specific keywords and provide relevant responses
    if (lowerMessage.includes("ุณุนุฑ") || lowerMessage.includes("ุชูููุฉ") || lowerMessage.includes("ุซูู")) {
      return {
        id: Date.now().toString(),
        type: "bot",
        content: "ุจุงููุณุจุฉ ููุฃุณุนุงุฑุ ููุฏู ุญููู ูุชููุนุฉ ุชูุงุณุจ ุฌููุน ุงูููุฒุงููุงุช:\n\nโข ุฃูุธูุฉ ุงููุฑุงูุจุฉ: ุชุจุฏุฃ ูู 2,500 ุฑูุงู\nโข ุจูุงุจุงุช ุงูุชุญูู: ุชุจุฏุฃ ูู 1,800 ุฑูุงู\nโข ุงูุฃูุธูุฉ ุงููุชูุงููุฉ: ุชุจุฏุฃ ูู 8,000 ุฑูุงู\n\nูู ุชุฑูุฏ ุนุฑุถ ุณุนุฑ ููุตู ูุงุญุชูุงุฌุงุชูุ",
        timestamp: new Date(),
        options: ["ุทูุจ ุนุฑุถ ุณุนุฑ", "ููุงุฑูุฉ ุงูููุชุฌุงุช", "ุงูุชุญุฏุซ ูุน ูุฎุชุต"]
      };
    }
    
    if (lowerMessage.includes("ุชุฑููุจ") || lowerMessage.includes("ุชุซุจูุช")) {
      return {
        id: Date.now().toString(),
        type: "bot",
        content: "ุฎุฏูุงุช ุงูุชุฑููุจ ูุงูุชุซุจูุช:\n\nโข ูุฑูู ููููู ูุนุชูุฏูู\nโข ุชุฑููุจ ุงุญุชุฑุงูู ูุน ุถูุงู\nโข ุงุฎุชุจุงุฑ ุดุงูู ูููุธุงู\nโข ุชุฏุฑูุจ ุนูู ุงูุงุณุชุฎุฏุงู\nโข ูุชุงุจุนุฉ ูุง ุจุนุฏ ุงูุชุฑููุจ\n\nูุชู ุชูุถู ููุนุฏ ุงูุชุฑููุจุ",
        timestamp: new Date(),
        options: ["ุญุฌุฒ ููุนุฏ", "ุชูููุฉ ุงูุชุฑููุจ", "ูุฏุฉ ุงูุชุฑููุจ", "ูุชุทูุจุงุช ุงูุชุฑููุจ"]
      };
    }
    
    if (lowerMessage.includes("ุถูุงู") || lowerMessage.includes("ููุงูุฉ")) {
      return {
        id: Date.now().toString(),
        type: "bot",
        content: "ูุนูููุงุช ุงูุถูุงู:\n\nโข ุถูุงู ุดุงูู ููุฏุฉ ุณูุชูู\nโข ูุดูู ูุทุน ุงูุบูุงุฑ ูุงูุนูุงูุฉ\nโข ุตูุงูุฉ ุฏูุฑูุฉ ูุฌุงููุฉ\nโข ุงุณุชุจุฏุงู ููุฑู ูู ุญุงูุฉ ุงูุนุทู\nโข ุฏุนู ุชููู ูุฌุงูู\n\nูู ูุฏูู ููุชุฌ ุชุญุช ุงูุถูุงูุ",
        timestamp: new Date(),
        options: ["ูุญุต ุงูุถูุงู", "ุทูุจ ุตูุงูุฉ", "ุชุฌุฏูุฏ ุงูุถูุงู", "ุดุฑูุท ุงูุถูุงู"]
      };
    }

    if (lowerMessage.includes("ูุดููุฉ") || lowerMessage.includes("ุนุทู") || lowerMessage.includes("ุฎูู")) {
      return {
        id: Date.now().toString(),
        type: "bot",
        content: "ุฃุนุชุฐุฑ ูุณูุงุน ุฐูู. ุฏุนูู ุฃุณุงุนุฏู ูู ุญู ุงููุดููุฉ:\n\nโข ูุตู ุงููุดููุฉ ุจุงูุชูุตูู\nโข ููุน ุงูููุชุฌ ุงููุชุฃุซุฑ\nโข ูุชู ุจุฏุฃุช ุงููุดููุฉ\nโข ูู ุฌุฑุจุช ุฅุนุงุฏุฉ ุงูุชุดุบููุ\n\nูููููู ุชูุตููู ุจููู ูุชุฎุตุต ููุฑุงู.",
        timestamp: new Date(),
        options: ["ุงูุชุญุฏุซ ูุน ููู", "ุฅุฑุณุงู ุตูุฑ ุงููุดููุฉ", "ุทูุจ ุฒูุงุฑุฉ ูููุฉ", "ุญููู ุณุฑูุนุฉ"]
      };
    }

    // Default response for unrecognized messages
    return {
      id: Date.now().toString(),
      type: "bot",
      content: "ุดูุฑุงู ูู ุนูู ุฑุณุงูุชู. ูุถูุงู ุชูุฏูู ุฃูุถู ุฎุฏูุฉุ ููููู:\n\nโข ุงุฎุชูุงุฑ ูู ุงูุฎูุงุฑุงุช ุฃุฏูุงู\nโข ุงูุชุญุฏุซ ูุน ุฃุญุฏ ูุฎุชุตููุง\nโข ุฅุฑุณุงู ุฑุณุงูุฉ ููุตูุฉ ุนุจุฑ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู\n\nููู ุชูุถู ุงููุชุงุจุนุฉุ",
      timestamp: new Date(),
      options: ["ุงูุชุญุฏุซ ูุน ูุฎุชุต", "ุฅุฑุณุงู ุจุฑูุฏ ุฅููุชุฑููู", "ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"]
    };
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage("");
    setIsTyping(true);
    setShowQuickActions(false);

    // Simulate typing delay
    setTimeout(() => {
      const botResponse = generateBotResponse(inputMessage);
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const handleQuickAction = (action: string) => {
    const response = botResponses[action as keyof typeof botResponses];
    
    if (response) {
      const userMessage: Message = {
        id: Date.now().toString(),
        type: "user",
        content: action,
        timestamp: new Date()
      };

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "bot",
        content: response.content,
        timestamp: new Date(),
        options: response.options
      };

      setMessages(prev => [...prev, userMessage, botMessage]);
    }
    setShowQuickActions(false);
  };

  const handleRating = (messageId: string, rating: number) => {
    setMessages(prev =>
      prev.map(msg =>
        msg.id === messageId ? { ...msg, rating } : msg
      )
    );
  };

  const resetChat = () => {
    setMessages([
      {
        id: "1",
        type: "bot",
        content: "ูุฑุญุจุงู ุจู ูุฑุฉ ุฃุฎุฑู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ",
        timestamp: new Date(),
        options: quickActions
      }
    ]);
    setShowQuickActions(true);
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        onClick={onClose}
      >
        <motion.div
          initial={{ opacity: 0, scale: 0.8, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.8, y: 20 }}
          onClick={(e) => e.stopPropagation()}
          className="bg-card border border-border/10 rounded-2xl w-full max-w-2xl h-[80vh] flex flex-col overflow-hidden"
        >
          {/* Header */}
          <div className="p-6 border-b border-border/10 bg-primary/5">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
                  <Bot className="w-6 h-6 text-primary" />
                </div>
                <div>
                  <h3 className="text-lg font-bold">ูุณุงุนุฏ EVA ุงูุฐูู</h3>
                  <div className="flex items-center gap-2 text-sm text-green-500">
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                    ูุชุตู ุงูุขู
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <button
                  onClick={resetChat}
                  className="p-2 hover:bg-primary/10 rounded-lg transition-colors"
                  title="ุจุฏุก ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ"
                >
                  <RefreshCw className="w-5 h-5" />
                </button>
                <button
                  onClick={onClose}
                  className="p-2 hover:bg-primary/10 rounded-lg transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-6 space-y-4">
            {messages.map((message) => (
              <motion.div
                key={message.id}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}
              >
                <div className={`max-w-[80%] ${message.type === "user" ? "order-2" : ""}`}>
                  <div
                    className={`rounded-2xl px-4 py-3 ${
                      message.type === "user"
                        ? "bg-primary text-background"
                        : "bg-background/50 border border-border/10"
                    }`}
                  >
                    <div className="whitespace-pre-line">{message.content}</div>
                    
                    {/* Options */}
                    {message.options && (
                      <div className="mt-4 space-y-2">
                        {message.options.map((option, index) => (
                          <button
                            key={index}
                            onClick={() => handleQuickAction(option)}
                            className="block w-full text-left px-3 py-2 bg-primary/10 hover:bg-primary/20 rounded-lg transition-colors text-sm"
                          >
                            {option}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                  
                  {/* Rating for bot messages */}
                  {message.type === "bot" && !message.options && (
                    <div className="flex items-center gap-2 mt-2 justify-end">
                      <span className="text-xs text-muted-foreground">ูููุฏุ</span>
                      <button
                        onClick={() => handleRating(message.id, 1)}
                        className={`p-1 rounded transition-colors ${
                          message.rating === 1 ? "text-green-500" : "text-muted-foreground hover:text-green-500"
                        }`}
                      >
                        <ThumbsUp className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleRating(message.id, -1)}
                        className={`p-1 rounded transition-colors ${
                          message.rating === -1 ? "text-red-500" : "text-muted-foreground hover:text-red-500"
                        }`}
                      >
                        <ThumbsDown className="w-4 h-4" />
                      </button>
                    </div>
                  )}
                  
                  <div className={`text-xs text-muted-foreground mt-1 ${
                    message.type === "user" ? "text-right" : "text-left"
                  }`}>
                    {message.timestamp.toLocaleTimeString("ar-SA", {
                      hour: "2-digit",
                      minute: "2-digit"
                    })}
                  </div>
                </div>
                
                <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                  message.type === "user" 
                    ? "bg-primary/10 order-1 mr-3" 
                    : "bg-primary/10 ml-3"
                }`}>
                  {message.type === "user" ? (
                    <User className="w-4 h-4 text-primary" />
                  ) : (
                    <Bot className="w-4 h-4 text-primary" />
                  )}
                </div>
              </motion.div>
            ))}
            
            {/* Typing indicator */}
            {isTyping && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex justify-start"
              >
                <div className="bg-background/50 border border-border/10 rounded-2xl px-4 py-3">
                  <div className="flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin text-primary" />
                    <span className="text-sm text-muted-foreground">ููุชุจ...</span>
                  </div>
                </div>
              </motion.div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Actions */}
          {showQuickActions && (
            <div className="px-6 py-4 border-t border-border/10">
              <div className="text-sm text-muted-foreground mb-3">ุงุฎุชุฑ ูู ุงูุฎูุงุฑุงุช ุงูุณุฑูุนุฉ:</div>
              <div className="grid grid-cols-2 gap-2">
                {quickActions.slice(0, 4).map((action) => (
                  <button
                    key={action}
                    onClick={() => handleQuickAction(action)}
                    className="px-3 py-2 bg-primary/10 hover:bg-primary/20 rounded-lg transition-colors text-sm text-left"
                  >
                    {action}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <div className="p-6 border-t border-border/10">
            <div className="flex gap-3">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                placeholder="ุงูุชุจ ุฑุณุงูุชู ููุง..."
                className="flex-1 px-4 py-3 bg-background border border-border/10 rounded-lg focus:outline-none focus:border-primary/50"
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isTyping}
                className="px-6 py-3 bg-primary text-background rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
            
            {/* Contact options */}
            <div className="flex items-center justify-center gap-4 mt-4 text-sm text-muted-foreground">
              <span>ุฃู ุชูุงุตู ูุนูุง ุนุจุฑ:</span>
              <button className="flex items-center gap-1 hover:text-primary transition-colors">
                <Phone className="w-4 h-4" />
                ุงููุงุชู
              </button>
              <button className="flex items-center gap-1 hover:text-primary transition-colors">
                <Mail className="w-4 h-4" />
                ุงูุจุฑูุฏ
              </button>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}